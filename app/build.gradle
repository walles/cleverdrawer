buildscript {
    repositories {
        maven { url 'https://maven.fabric.io/public' }
    }

    dependencies {
        // These docs use an open ended version so that our plugin
        // can be updated quickly in response to Android tooling updates

        // We recommend changing it to the latest version from our changelog:
        // https://docs.fabric.io/android/changelog.html#fabric-gradle-plugin
        classpath 'io.fabric.tools:gradle:1.24.5'
    }
}

apply plugin: 'com.android.application'

// Fabric / Crashlytics must come after the Android plugin
apply plugin: 'io.fabric'
repositories {
    maven { url 'https://maven.fabric.io/public' }
}

// During git hook execution some GIT_ variables are set which make our commands fail unless we
// strip those variables out
def getNoGitEnv = { ->
    def noGitEnv = new HashMap<String, String>(System.getenv())
    def iterator = noGitEnv.entrySet().iterator()
    while (iterator.hasNext()) {
        def entry = iterator.next()
        if (entry.key.startsWith("GIT_")) {
            iterator.remove()
        }
    }

    return noGitEnv
}

// From: http://stackoverflow.com/questions/17097263/automatically-versioning-android-project-from-git-describe-with-android-studio-g
def getVersionCode = { ->
    def output = new ByteArrayOutputStream()
    exec {
        environment = getNoGitEnv()
        standardOutput = output
        commandLine 'git', 'tag', '--list'
    }
    return output.toString().split("\n").size()
}

def getVersionName = { ->
    def output = new ByteArrayOutputStream()
    exec {
        environment = getNoGitEnv()
        standardOutput = output
        commandLine 'git', 'describe', '--tags', '--dirty', '--first-parent'
    }
    return output.toString().trim()
}

android {
    compileSdkVersion 26
    defaultConfig {
        applicationId "com.gmail.walles.johan.cleverdrawer"
        minSdkVersion 19
        targetSdkVersion 26
        versionCode getVersionCode()
        versionName getVersionName()
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
    lintOptions {
        abortOnError true
        checkAllWarnings true
        warningsAsErrors true

        textReport true
        textOutput "stdout"
        explainIssues false
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    implementation 'com.android.support:appcompat-v7:26.1.0'
    implementation 'com.android.support.constraint:constraint-layout:1.0.2'
    implementation 'com.android.support:design:26.1.0'
    implementation 'com.jakewharton.timber:timber:4.6.0'
    implementation 'org.jetbrains:annotations:15.0'
    implementation 'com.fasterxml.jackson.core:jackson-databind:2.9.2'

    implementation('com.crashlytics.sdk.android:crashlytics:2.8.0@aar') {
        transitive = true
    }

    testImplementation 'junit:junit:4.12'

    // Having this dependency gets us Flyway logs from failed unit tests
    testImplementation 'org.slf4j:slf4j-simple:1.7.25'

    androidTestImplementation 'com.android.support.test:runner:1.0.1'
    androidTestImplementation 'com.android.support.test.espresso:espresso-core:3.0.1'
}
